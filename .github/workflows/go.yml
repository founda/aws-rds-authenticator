# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches: [ "main" ]
  pull_request:    

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Use the go version as specified in the go.mod, using the latest available
      # patch release, see:
      # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache-dependency-path: go.sum

      - name: Verify formatting
        run: test -z "$(gofmt -l ./)"

  vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Use the go version as specified in the go.mod, using the latest available
      # patch release, see:
      # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache-dependency-path: go.sum

      - name: Run Go Vet
        run: go vet ./...

  goimports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Use the go version as specified in the go.mod, using the latest available
      # patch release, see:
      # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache-dependency-path: go.sum

      - name: Check imports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          test -z "$(goimports -local founda.com -l .)"
          
  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Use the go version as specified in the go.mod, using the latest available
      # patch release, see:
      # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache-dependency-path: go.sum

      - name: Verify go.mod is tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  staticcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Use the go version as specified in the go.mod, using the latest available
      # patch release, see:
      # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache-dependency-path: go.sum

      - name: Run Staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.3"
          install-go: false

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # Use the go version as specified in the go.mod, using the latest available
    # patch release, see:
    # https://github.com/actions/setup-go#getting-go-version-from-the-gomod-file
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: "./go.mod"
        cache-dependency-path: go.sum

    - name: Install dependencies
      run: go get .

    - name: Test with Go
      run: |
        go install github.com/jstemmer/go-junit-report/v2@latest
        go test -v ./... | go-junit-report -iocopy -out report.xml -set-exit-code

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: report.xml

  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - format
      - vet
      - goimports
      - tidy
      - staticcheck
      - test
    strategy:
      matrix:
        target: [ "alpine", "bullseye", "scratch" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=1.0.0${{ fromJSON(format('["-{0}",""]', matrix.target))[matrix.target == 'scratch'] }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.target }}
